<?php
namespace frontend\models;

use Yii;
use yii\base\Exception;
use yii\base\Model;
use common\helper\RandomCodeGenerator;
use common\exceptions\MailSendException;
use yii\helpers\Url;

/**
 * Signup form
 */
class SignupForm extends Model
{
    /**
     * 激活码过期时间
     */
    const ACTIVATION_EXPIRE_TIME = 'activation_expired_time';
    public $username;
    public $email;
    public $password;
    public $shop_name;
    public $rePassword;
    public $activation_code;
    public $verificationCode;


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['username', 'filter', 'filter' => 'trim'],
            [['username', 'shop_name'], 'required'],
            ['username', 'unique', 'targetClass' => '\common\models\User', 'message' => 'This username has already been taken.'],
            ['username', 'string', 'min' => 6, 'max' => 12],
            ['email', 'filter', 'filter' => 'trim'],
            ['email', 'required'],
            ['email', 'email'],
            ['email', 'string', 'max' => 255],
            ['email', 'unique', 'targetClass' => '\common\models\User', 'message' => 'This email address has already been taken.'],

            [['password', 'rePassword'], 'required'],
            [['password', 'rePassword'], 'string', 'min' => 6, 'max' => 12],
            ['password', 'compare', 'compareAttribute' => 'rePassword', 'operator' => '===', 'message' => '两次输入的密码必须一致'],
            ['activation_code', 'string', 'max' => 64],
            ['shop_name', 'string', 'max' => 46],
            ['verificationCode', 'captcha'],
        ];
    }

    public function attributeLabels()
    {
        $parent = parent::attributeLabels(); // TODO: Change the autogenerated stub
        $parent['verificationCode'] = Yii::t('app', '验证码');
        return $parent;
    }

    /**
     * @return User|null
     */
    public function signup()
    {
        if (!$this->validate()) {
            return null;
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $user = new User();
            $user->username = $this->username;
            $user->email = $this->email;
            $user->shop_name = $this->shop_name;
            $user->setPassword($this->password);
            $user->generateAuthKey();
            if (!$user->save()) {
                throw new Exception('user创建失败');
            }
            $userDetail = new UserDetail();
            $userDetail->user_id = $user->id;
            $userDetail->code_expired_time = time() + (Yii::$app->params[self::ACTIVATION_EXPIRE_TIME]);
            $userDetail->activation_code = RandomCodeGenerator::getCode();
            if (!$userDetail->save()) {
                throw new Exception('userDetail创建失败');
            }
            $mail = new \common\mail\models\Mail();
            $url = Url::to(['/site/activation', 'username' => md5($this->username), 'code' =>$userDetail->activation_code]);
            $mail->signUpMail($this->email, $url);
            if (!$mail->sendFlag) {
                throw new MailSendException('邮件发送失败');
            }
            $transaction->commit();
        } catch (MailSendException $e) {
            $transaction->rollBack();
            $mail = new \common\mail\models\Mail();
            $mail->signUpErrorMailToAdmin();
            return null;
        } catch (Exception $e) {
            $transaction->rollBack();
            return null;
        }
        return $user;
    }

    /**
     * @param $md5Username
     * @param $code
     * @return null|$user
     */
    protected static function findUserByCodeForActivation($md5Username, $code)
    {
        $userDetail = UserDetail::find()
            ->where(['activation_code' => $code])
            ->andWhere(['>', 'code_expired_time', time()])
            ->one();
        if (!$userDetail) {
            return null;
        }
        $user = User::findOne(['id' => $userDetail->user_id, 'status' => User::STATUS_DEFAULT]);
        if ($user && md5($user->username) == $md5Username) {
            // 激活码失效
            $userDetail->code_expired_time = 0;
            $userDetail->update();
            return $user;
        }
        // 激活码失效
        $userDetail->code_expired_time = 0;
        $userDetail->update();
        return null;
    }

    /**
     * @param $md5Username
     * @param $code
     * @return bool|$user
     */
    public static function activeUser($md5Username, $code)
    {
        if ($user = static::findUserByCodeForActivation($md5Username, $code)) {
            $user->status = User::STATUS_ACTIVE;
            if ($user->update()) {
                return $user;
            }
        }
        return false;
    }
}
